#!/usr/bin/env python
# coding: utf-8

# # 25조 블랙아이스 탐지 Streamlit 시각화

# In[1]:


get_ipython().system('pip install streamlit')


# In[50]:


get_ipython().run_cell_magic('writefile', 'blackice.py', '\n# ==================================== import ====================================\nimport pandas as pd\nimport numpy as np\nimport datetime\nimport joblib\nfrom keras.models import load_model\nfrom haversine import haversine\nfrom urllib.parse import quote\nimport streamlit as st\nfrom streamlit_folium import st_folium\nimport folium\nimport branca\nfrom geopy.geocoders import Nominatim\nimport ssl\nimport plotly.express as px\nfrom urllib.request import urlopen\nfrom geopy.distance import geodesic\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams[\'font.family\'] =\'Malgun Gothic\'\nplt.rcParams[\'axes.unicode_minus\'] =False\nfrom collections import Counter\n\n# ==================================== Layout ====================================\nst.set_page_config(layout="wide")\n\n# tabs\nt1, t2 = st.tabs([\'가격예측\', \'통계분석\'])\n\n# t1\nwith t1:\n    \n    st.markdown("# 드론을 활용한 블랙아이스 탐지 솔루션")\n\n    st.image(\'logo.png\')\n\n    now_date = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=9)\n\n\n    st.markdown("#### 날짜 및 시간 정보")\n\n    col110, col111, col112, col113 = st.columns([0.1, 0.4, 0.1, 0.4])\n    with col110:\n        st.info("현재 날짜")\n    with col111:\n        input_date = st.date_input(\'날짜\', label_visibility="collapsed")\n    with col112:\n        st.info("현재 시간")\n    with col113:\n        input_time = st.time_input(\'시간\', datetime.time(now_date.hour, now_date.minute), label_visibility="collapsed")\n\n    st.markdown("#### 드론 출발 위치")\n    col120, col121 = st.columns([0.1, 0.4])\n    with col120:\n        st.info("드론 출발 위치")\n    with col121:\n        location2 = st.selectbox("드론 출발 위치를 선택하세요", \n                                 ("도로교통공단 본부",    # 도로교통공단 본부 - 강원특별자치도 원주시 혁신로 2\n                                 "강릉대학교 원주캠퍼스", # 강릉대학교 원주캠퍼스 - 강원특별자치도 원주시 흥업면 남원로 150\n                                 "원주 부론산업단지"))    # 부론산업단지 - 강원특별자치도 원주시 부론면 견훤로 640-2\n\n\n\n    # 상습결빙구간 탐지 결과\n    ice = pd.read_csv("./결빙 지역 감지 결과 1.csv", encoding = "cp949", index_col = 0)\n\n    st.markdown("#### 실시간 결빙 상습/예상 구간")\n    st.caption("상위 6개 결빙 지역")\n    st.dataframe(ice)\n\n\n    # ================================================================================  \n\n    # 드론 출동 현황\n\n    Dron = pd.read_csv("./드론 출동 현황.csv", encoding = "cp949", index_col = 0)\n    Dron1 = pd.read_csv("./드론 출동 현황1.csv", encoding = "cp949", index_col = 0)\n    Dron2 = pd.read_csv("./드론 출동 현황2.csv", encoding = "cp949", index_col = 0)\n\n\n    st.markdown("#### 실시간 드론 상태 현황")\n\n    st.dataframe(Dron)\n\n\n    # Folium 맵 1차 객체생성\n    # =============================================================================================\n\n    df = pd.read_csv("./1월10일8시_원주시_위도경도_총합.csv", encoding = "utf-8-sig")\n\n    df = {\n        \'Latitude\': df[\'위도\'],\n        \'Longitude\': df[\'경도\'],\n    }\n\n    df = pd.DataFrame(df)\n\n    map_center = [37.334794, 127.921739]\n    # Create a Folium map object\n    my_map = folium.Map(location=map_center, zoom_start=11, width = 1400, height = 1000)\n    circle_locations = [\n        {\'latitude\': 37.3244992551977, \'longitude\': 127.97535913134},\n        {\'latitude\': 37.3051998482115, \'longitude\': 127.922180834517},\n        {\'latitude\': 37.256395635416, \'longitude\': 127.780134667723}\n    ]\n\n    circle_radius = 7500  # 7.5 km in meters \n\n    # 반경 원 나타내기 folium.CircleMarker([위도, 경도]).add_to(지도)========================================\n\n\n    for location in circle_locations:\n        folium.Circle(\n            location=[location[\'latitude\'], location[\'longitude\']],\n            radius=circle_radius,\n            color=\'blue\',\n            fill=True,\n            fill_opacity=0.15\n        ).add_to(my_map)\n\n    for index, row in df[:9].iterrows():\n        folium.Marker(\n            location=[row[\'Latitude\'], row[\'Longitude\']],\n            icon=folium.Icon(icon = \'flag\', color=\'orange\')\n        ).add_to(my_map)\n\n    for index, row in df[9:].iterrows():\n        folium.Marker(\n            location=[row[\'Latitude\'], row[\'Longitude\']],\n            icon=folium.Icon(icon = \'tower\', color=\'orange\')\n        ).add_to(my_map)\n\n    st.title(\'원주시 결빙 상습/예상 구간\')\n    st.info("2023-01-10 AM 8:00 현황 (flag : 상습결빙구간, tower : 예상결빙구간)")\n\n    st.components.v1.html(my_map._repr_html_(), width=1400, height=1000)\n\n\n    i = 0\n\n    # 드론 출동 버튼\n    if st.button("드론 출동"):\n\n\n        df = pd.read_csv("./상습예측구간_거리순정렬.csv", encoding = "utf-8-sig")\n\n        df = {\n            \'Latitude\': df[\'위도\'],\n            \'Longitude\': df[\'경도\'],\n        }\n\n        df = pd.DataFrame(df)\n\n        map_center = [37.334794, 127.921739]\n        # Create a Folium map object\n        my_map = folium.Map(location=map_center, zoom_start=11, width = 1400, height = 1000)\n        circle_locations = [\n            {\'latitude\': 37.3244992551977, \'longitude\': 127.97535913134},\n            {\'latitude\': 37.3051998482115, \'longitude\': 127.922180834517},\n            {\'latitude\': 37.256395635416, \'longitude\': 127.780134667723}\n        ]\n\n        circle_radius = 7500  # 7.5 km in meters \n\n    # 반경 원 나타내기 folium.CircleMarker([위도, 경도]).add_to(지도) ==============================\n\n\n        for location in circle_locations:\n            folium.Circle(\n                location=[location[\'latitude\'], location[\'longitude\']],\n                radius=circle_radius,\n                color=\'blue\',\n                fill=True,\n                fill_opacity=0.15\n            ).add_to(my_map)\n\n        for index, row in df[0:1].iterrows():\n            folium.Marker(\n                location=[row[\'Latitude\'], row[\'Longitude\']],\n                icon=folium.Icon(icon = \'tower\', color=\'red\')\n            ).add_to(my_map)\n\n        for index, row in df[1:2].iterrows():\n            folium.Marker(\n                location=[row[\'Latitude\'], row[\'Longitude\']],\n                icon=folium.Icon(icon = \'tower\', color=\'gray\')\n            ).add_to(my_map)\n\n        for index, row in df[2:8].iterrows():\n            folium.Marker(\n                location=[row[\'Latitude\'], row[\'Longitude\']],\n                icon=folium.Icon(icon = \'tower\', color=\'orange\')\n            ).add_to(my_map)\n\n        for index, row in df[8:].iterrows():\n            folium.Marker(\n                location=[row[\'Latitude\'], row[\'Longitude\']],\n                icon=folium.Icon(icon = \'flag\', color=\'orange\')\n            ).add_to(my_map)\n\n\n        st.title(\'원주시 결빙 상습/예상 구간\')\n\n        st.warning("드론탐지가 8:46 AM에 완료되었습니다.")\n\n        st.markdown("#### 드론 탐지 결과")\n\n        st.dataframe(Dron1)\n\n        st.info("2023-01-10 AM 8:46 현황 (flag : 상습결빙구간, tower : 예상결빙구간)")\n\n        st.components.v1.html(my_map._repr_html_(), width=1400, height=1000)\n\n\n\n        i += 1\n\n\n    if st.button("드론 출동 "):\n\n        i += 1\n\n\n        df = pd.read_csv("./상습예측구간_거리순정렬.csv", encoding = "utf-8-sig")\n\n        df = {\n            \'Latitude\': df[\'위도\'],\n            \'Longitude\': df[\'경도\'],\n        }\n\n        df = pd.DataFrame(df)\n\n        map_center = [37.334794, 127.921739]\n\n        my_map = folium.Map(location=map_center, zoom_start=11, width = 1400, height = 1000)\n        circle_locations = [\n            {\'latitude\': 37.3244992551977, \'longitude\': 127.97535913134},\n            {\'latitude\': 37.3051998482115, \'longitude\': 127.922180834517},\n            {\'latitude\': 37.256395635416, \'longitude\': 127.780134667723}\n        ]\n\n        circle_radius = 7500  # 7.5 km in meters \n\n    # 반경 원 나타내기 folium.CircleMarker([위도, 경도]).add_to(지도) ==============================\n\n\n        for location in circle_locations:\n            folium.Circle(\n                location=[location[\'latitude\'], location[\'longitude\']],\n                radius=circle_radius,\n                color=\'blue\',\n                fill=True,\n                fill_opacity=0.15\n            ).add_to(my_map)\n\n        for index, row in df[0:1].iterrows():\n\n            html = """<!DOCTYPE html>\n                        <html>\n                            <table style="height: 126px; width: 330px;"> <tbody> <tr>\n                                <td style="background-color: #2A799C;">\n                                <div style="color: #ffffff;text-align:center;">위도</div></td>\n                                <td style="width: 230px;background-color: #C5DCE7;">{}</td>""".format(ice[\'위도\'][0])+"""</tr>\n                                <tr><td style="background-color: #2A799C;">\n                                <div style="color: #ffffff;text-align:center;">경도</div></td>\n                                <td style="width: 230px;background-color: #C5DCE7;">{}</td>""".format(ice[\'경도\'][0])+"""</tr>\n                                <tr><td style="background-color: #2A799C;">\n                                <div style="color: #ffffff;text-align:center;">거리(km)</div></td>\n                                <td style="width: 230px;background-color: #C5DCE7;">{}</td>""".format(ice[\'거리(km)\'][0])+""" </tr>\n                            </tbody> </table> </html> """\n\n            iframe = branca.element.IFrame(html=html, width=350, height=150)\n            popup_text = folium.Popup(iframe,parse_html=True)\n\n            folium.Marker(\n                location=[row[\'Latitude\'], row[\'Longitude\']],\n                popup=popup_text, tooltip=ice[\'주소(지역)\'][0],\n                icon=folium.Icon(icon = \'tower\', color=\'red\')\n            ).add_to(my_map)\n\n        for index, row in df[1:2].iterrows():\n            folium.Marker(\n                location=[row[\'Latitude\'], row[\'Longitude\']],\n                icon=folium.Icon(icon = \'tower\', color=\'gray\')\n            ).add_to(my_map)\n\n        for index, row in df[2:3].iterrows():\n            folium.Marker(\n                location=[row[\'Latitude\'], row[\'Longitude\']],\n                icon=folium.Icon(icon = \'tower\', color=\'red\')\n            ).add_to(my_map)\n\n        for index, row in df[3:8].iterrows():\n            folium.Marker(\n                location=[row[\'Latitude\'], row[\'Longitude\']],\n                icon=folium.Icon(icon = \'tower\', color=\'orange\')\n            ).add_to(my_map)\n\n        for index, row in df[8:9].iterrows():\n            folium.Marker(\n                location=[row[\'Latitude\'], row[\'Longitude\']],\n                icon=folium.Icon(icon = \'flag\', color=\'red\')\n            ).add_to(my_map)\n\n        for index, row in df[9:].iterrows():\n            folium.Marker(\n                location=[row[\'Latitude\'], row[\'Longitude\']],\n                icon=folium.Icon(icon = \'flag\', color=\'orange\')\n            ).add_to(my_map)\n\n        st.title(\'원주시 결빙 상습/예상 구간\')\n\n        st.warning("드론탐지가 9:32 AM에 완료되었습니다.")\n\n        st.markdown("#### 드론 탐지 결과")\n\n        st.dataframe(Dron2)\n\n        st.info("2023-01-10 AM 9:32 현황 (flag : 상습결빙구간, tower : 예상결빙구간)")\n\n        st.components.v1.html(my_map._repr_html_(), width=1400, height=1000)\n\n\n\n    elif i == 2:\n        st.dataframe(Dron2)\n\nwith t2:\n    st.markdown("# 원주시 결빙구간 분석")\n    \n    st.image(\'logo.png\')\n    \n    st.error("통계 분석")\n    \n    df_a = pd.read_csv(\'행정안전부_상습 결빙구간_20231222.csv\', encoding = \'utf-8-sig\')\n    \n    df_a = df_a[[\'구간 번호\', \'대표지역\']]\n\n    cnt = 0\n    cnt1 = 0\n    cnt2 = 0\n    g_list = []\n\n    for i in range(len(df_a)):\n        if \'원주\' in str(df_a[\'대표지역\'][i]):\n            cnt += 1\n\n    for i in range(len(df_a)):\n        if \'강원\' in str(df_a[\'대표지역\'][i]):\n            cnt1 += 1\n\n    for i in range(len(df_a)):\n        if \'강원\' in str(df_a[\'대표지역\'][i]):\n            g_list.append(df_a[\'대표지역\'][i].split()[-1])\n            cnt2 += 1\n\n    g_c = Counter(g_list).most_common()\n\n    ratio = []\n\n    for i in range(len(g_c) - 4):\n        ratio.append(g_c[i][1])\n\n    ratio.append(51)\n\n    labels = []\n\n    for i in range(len(g_c) - 4):\n        labels.append(g_c[i][0])\n\n    labels.append(\'그 외\')\n\n    df_1 = pd.DataFrame({"지역": labels, "도수" : ratio})\n\n    ratio_1 = [len(df_a) - cnt1, cnt1 - cnt, cnt]\n    labels_1 = [\'전국\', \'강원도\', \'원주시\']\n\n    df_2 = pd.DataFrame({"지역": labels_1, "도수" : ratio_1})\n    \n    c1, c2 = st.columns([0.45, 0.45])\n    \n    with c1:\n        fig = px.pie(df_2, names=\'지역\', values=\'도수\', title = \'전국 / 강원도 / 원주시 결빙구간비율\' , hole = 0.3)\n        fig.update_traces(textposition = \'inside\', textinfo = \'percent + label\')\n        fig.update_layout(font=dict(size=18))\n        st.plotly_chart(fig)\n\n    with c2:\n        fig = px.pie(df_1, names=\'지역\', values=\'도수\', title = \'강원도 내 전지역 결빙구간비율\' , hole = 0.3)\n        fig.update_traces(textposition = \'inside\', textinfo = \'percent + label\')\n        fig.update_layout(font=dict(size=18))\n        st.plotly_chart(fig)\n')


# In[ ]:


get_ipython().system('streamlit run blackice.py')


# In[ ]:




